initSidebarItems({"constant":[["BALANCES",""],["BLOCK_KEY","storage key for the BlockInfo when the last handle was executed"],["CONTR_CONF",""],["PREFIX_NFT_OWNER","prefix for NFT ownership history"],["PREFIX_PERMISSIONS","prefix for storing permissions"],["PREFIX_PERMISSION_ID","prefix for storing permission identifier (ID) for a given address"],["PREFIX_RECEIVERS",""],["PREFIX_REVOKED_PERMITS",""],["PREFIX_TXS","prefix for storage of transactions"],["PREFIX_TX_IDS","prefix for storage of tx ids"],["PREFIX_VIEW_KEY",""],["RESPONSE_BLOCK_SIZE",""],["TKN_INFO",""],["TKN_TOTAL_SUPPLY",""]],"fn":[["balances_r","Multilevel bucket to store balances for each token_id & addr combination. Key is to  be [`token_id`, `owner`: to_binary(&HumanAddr)?.as_slice()]  "],["balances_w","Multilevel bucket to store balances for each token_id & addr combination. Key is to  be [`token_id`, `owner`: to_binary(&HumanAddr)?.as_slice()] When using `balances_w` make sure to also check if need to change `current owner` of an nft and `total_supply` "],["blockinfo_r","Reads BlockInfo of latest tx. Should not be necessary after env becomes available to queries"],["blockinfo_w","Saves BlockInfo of latest tx. Should not be necessary after env becomes available to queries"],["contr_conf_r","Contract configuration: reads information on this contract"],["contr_conf_w","Contract configuration: stores information on this contract"],["get_receiver_hash",""],["read_viewing_key",""],["set_receiver_hash",""],["tkn_info_r","token_id configs. Key is `token_id.as_bytes()`"],["tkn_info_w","token_id configs. Key is `token_id.as_bytes()`"],["tkn_tot_supply_r","total supply of a token_id. Key is `token_id.as_bytes()`"],["tkn_tot_supply_w","total supply of a token_id. Key is `token_id.as_bytes()`"],["write_viewing_key",""]],"mod":[["expiration",""],["metadata",""],["permissions",""],["state_structs",""],["txhistory",""]]});